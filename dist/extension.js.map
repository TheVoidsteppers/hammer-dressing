{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/extension.ts",".././src/skipWorktree.ts","../external commonjs \"vscode\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport { TreeItem } from 'vscode';\r\nimport { SkipWorktreeProvider } from './skipWorktree';\r\nimport { GitExtension } from './api/git'\r\n\r\n\r\nexport async function activate(context: vscode.ExtensionContext): Promise<void> {\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand('extension.HammerDressing.git.skip-worktree', (...args) => {\r\n      const filePaths = args[1]\r\n      handleToggleSkipWorktree(filePaths, true).then(() => {\r\n        skipWorktreeProvider.refresh()\r\n      })\r\n    }),\r\n    vscode.commands.registerCommand('extension.HammerDressing.git.no-skip-worktree', (...args) => {\r\n      const filePaths = args[1]\r\n      handleToggleSkipWorktree(filePaths, false).then(() => {\r\n        skipWorktreeProvider.refresh()\r\n      })\r\n    }),\r\n  );\r\n\r\n  const skipWorktreeProvider = new SkipWorktreeProvider();\r\n\tvscode.window.registerTreeDataProvider('SkipWorktreeFiles', skipWorktreeProvider);\r\n\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand('extension.HammerDressing.git.skip-worktree-refresh', () => skipWorktreeProvider.refresh()),\r\n    vscode.commands.registerCommand('extension.HammerDressing.git.no-skip-worktree-in-treeview', (treeItem: TreeItem) => {\r\n      handleNoSkipWorktree(treeItem).then(() => {\r\n        skipWorktreeProvider.refresh()\r\n      })\r\n    }),\r\n  )\r\n}\r\n\r\n\r\nasync function handleToggleSkipWorktree (filePaths: vscode.Uri[], isSkip: boolean): Promise<void> {\r\n  const ext = vscode.extensions.getExtension<GitExtension>('vscode.git');\r\n  await ext?.activate();\r\n  const gitExtension = ext?.exports;\r\n  const git = (gitExtension as any).model?.git\r\n  const gitApi = gitExtension?.getAPI(1);\r\n\r\n  const repositoryRoot = gitApi?.repositories[0]?.rootUri?.fsPath\r\n\r\n  if (Array.isArray(filePaths)) {\r\n    const execArr = filePaths.map((filePath) => {\r\n      const folder = vscode.workspace.getWorkspaceFolder(filePath)\r\n      if (!folder || !folder.uri) {\r\n        return\r\n      }\r\n      const path = filePath.path.replace(folder!.uri.path, '.')\r\n      const command = `update-index ${ isSkip ? '--skip-worktree' : '--no-skip-worktree' } ${path}`\r\n\r\n      return git.exec(repositoryRoot, command.split(' '))\r\n    })\r\n    await Promise.all(execArr)\r\n  }\r\n}\r\n\r\nasync function handleNoSkipWorktree (treeItem: TreeItem): Promise<void> {\r\n  const ext = vscode.extensions.getExtension<GitExtension>('vscode.git');\r\n  await ext?.activate();\r\n  const gitExtension = ext?.exports;\r\n  const git = (gitExtension as any).model.git\r\n  const gitApi = gitExtension?.getAPI(1);\r\n\r\n  const repositoryRoot = gitApi?.repositories[0]?.rootUri?.fsPath\r\n  const command = `update-index --no-skip-worktree ${treeItem.label}`\r\n\r\n  await git.exec(repositoryRoot, command.split(' '))\r\n}\r\n","import * as vscode from 'vscode';\r\nimport { TreeItem, ProviderResult } from 'vscode';\r\nimport { GitExtension } from './api/git'\r\n\r\nexport class SkipWorktreeProvider implements vscode.TreeDataProvider<TreeItem> {\r\n\r\n  private _onDidChangeTreeData: vscode.EventEmitter<void> = new vscode.EventEmitter<void>()\r\n  readonly onDidChangeTreeData: vscode.Event<void> = this._onDidChangeTreeData.event\r\n\r\n  private data: TreeItem[] = []\r\n\r\n  constructor() {\r\n    this.parseTree().then(() => {\r\n      this._onDidChangeTreeData.fire()\r\n    })\r\n  }\r\n\r\n  get gitExtension () {\r\n    const ext = vscode.extensions.getExtension<GitExtension>('vscode.git');\r\n    const gitExtension = ext?.exports;\r\n    return gitExtension\r\n  }\r\n\r\n  get git() {\r\n    const git = (this.gitExtension as any).model?.git\r\n    return git\r\n  }\r\n\r\n  get repositoryRoot () : string | undefined {\r\n    return this.gitExtension?.getAPI(1)?.repositories[0]?.rootUri?.fsPath\r\n  }\r\n\r\n  async refresh(): Promise<void> {\r\n    await this.parseTree();\r\n    this._onDidChangeTreeData.fire();\r\n  }\r\n\r\n  private async parseTree(): Promise<void> {\r\n    if (!this.repositoryRoot) return\r\n    this.data = [];\r\n    const lsFiles = await this.git.exec(this.repositoryRoot, 'ls-files -v'.split(' '))\r\n    const stdoutStr = lsFiles.stdout\r\n    const skipFiles = stdoutStr.split('\\n').filter((file: string) => file.startsWith('S ') ||  file.startsWith('s ')).map((file: string) => file.replace(/s /i, ''))\r\n\r\n    this.data = skipFiles.map((item: string)  => {\r\n      return new TreeItem(item)\r\n    })\r\n  }\r\n\r\n  getTreeItem(element: TreeItem): TreeItem | Thenable<TreeItem> {\r\n    return element\r\n  }\r\n\r\n  getChildren(): ProviderResult<TreeItem[]> {\r\n    return this.data;\r\n  }\r\n}\r\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["handleToggleSkipWorktree","filePaths","isSkip","ext","vscode","extensions","getExtension","activate","gitExtension","exports","git","model","gitApi","getAPI","repositoryRoot","repositories","rootUri","fsPath","Array","isArray","execArr","map","filePath","folder","workspace","getWorkspaceFolder","uri","path","replace","command","exec","split","Promise","all","context","subscriptions","push","commands","registerCommand","args","then","skipWorktreeProvider","refresh","SkipWorktreeProvider","window","registerTreeDataProvider","treeItem","label","handleNoSkipWorktree","constructor","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","this","event","data","parseTree","fire","skipFiles","stdout","filter","file","startsWith","item","TreeItem","getTreeItem","element","getChildren","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}